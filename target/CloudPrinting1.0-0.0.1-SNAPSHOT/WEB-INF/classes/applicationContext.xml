<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.0.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
           http://www.springframework.org/schema/tx   
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
           http://www.springframework.org/schema/mvc   
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"> 
       
	<!-- 用于配置Spring自动扫描类，通过base-package属性设置扫描的包名 -->
    <context:component-scan base-package="msk.cloud.*.service.impl"/>
	<!-- 数据库 -->
 	<bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
 		<property name="driver" value="com.mysql.jdbc.Driver"/>
	    <!-- 	<property name="url" value="jdbc:mysql://localhost:3306/cloudprinting?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="123"/>  -->
       <property name="url" value="jdbc:mysql://localhost:3306/ePrinter?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="qwe123root"/>
    </bean>
    <!-- sqlSessionFanctoryBean 是用于创建sqlSessionFanctory的 -->
    <!-- 
    configLocation:用于配置mybatis配置XMLd额路径；
    dataSource:用于配置数据源，该选项为必选项，必须通过这个属性配置数据源，使用上节配置好的数据库连接池。
    mapperLocations:配置selSessionFactoryBean扫描XML文件的路径，可以使用Ant风格的路径进行配置；
    typeAliasesPackage：配置包中类的别名，包中类在XML文件中使用时可以省略包名部分，直接使用类名，不支持Ant风格,当需要配置多个包路径可以使用分号或逗号隔开。
    还有其它的配置，暂时没用到，可以自己去了解。
     -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <array>
                <value>classpath:msk/cloud/**/mapper/*.xml</value>
            </array>
        </property>
        <property name="typeAliasesPackage" value="msk.cloud.web.model"/>
    </bean>
    <!-- 通过MapperScannerConfigurer 类来自动扫描所有的Mapper接口，使用时直接注入接口。
    basePackage：用于配置基本路径，可以使用分号或逗号作为分隔符设置多个包路径，每个映射器将会在指定包路径递归的搜索。
    annotationClass：用于过滤被扫描的接口，如果设置了该属性，那么mybatis的接口只有包含注解才会被扫描进去。
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="addToConfig" value="true"/>
        <property name="basePackage" value="msk.cloud.**.mapper"/>
    </bean>
    
    <!-- 定义文件解释器 -->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
	    <!-- 设置默认编码 -->  
	    <property name="defaultEncoding" value="utf-8"></property>  
	    <!-- 上传文件最大大小10M
	    <property name="maxUploadSize" value="10485760"></property>    -->  
	     <!-- 测试用上传文件最大大小500k--> 
	    <property name="maxUploadSize" value="512000"></property>    
	</bean>  
	<!-- 错误拦截 -->
	<bean id="exceptionResolver" class="msk.cloud.web.Exception.ExceptionHandler"/>  
	<mvc:annotation-driven/>
	<!-- 配置拦截器，多个拦截器顺序执行 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/Printing.action"/>
			<mvc:mapping path="/upload.action"/>
			<mvc:mapping path="/print.action"/>
			<mvc:mapping path="/Personal.action"/>
			<mvc:mapping path="/changePwd.action"/>
			<mvc:mapping path="/findFinsh.action"/>
			<mvc:mapping path="/findUnFinsh.action"/>
			<bean class="msk.cloud.web.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
 	<aop:aspectj-autoproxy/>

    <aop:config>
        <aop:pointcut id="appService" expression="execution(* msk.cloud.*.service..*Service*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="appService"/>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>